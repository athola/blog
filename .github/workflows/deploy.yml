name: Deploy to Production

on:
  workflow_run:
    workflows: ["Rust", "Database Migrations"]
    types: [completed]
    branches: [master]

env:
  CARGO_TERM_COLOR: always

jobs:
  # Check if DigitalOcean deployment is properly configured
  deployment-check:
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Configuration checks should be fast
    if: github.event.workflow_run.conclusion == 'success'
    outputs:
      deploy-enabled: ${{ steps.check-config.outputs.enabled }}
      domain-accessible: ${{ steps.check-domain.outputs.accessible }}
    steps:
    - name: Check DigitalOcean configuration
      id: check-config
      run: |
        echo "Checking DigitalOcean deployment prerequisites..."
        
        # Check if required secrets are set
        if [ -z "${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}" ]; then
          echo "❌ DIGITALOCEAN_ACCESS_TOKEN secret not configured"
          echo "enabled=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        if [ -z "${{ secrets.SURREAL_ADDRESS }}" ]; then
          echo "❌ SURREAL_ADDRESS secret not configured" 
          echo "enabled=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        if [ -z "${{ secrets.SURREAL_PASSWORD }}" ]; then
          echo "❌ SURREAL_PASSWORD secret not configured"
          echo "enabled=false" >> $GITHUB_OUTPUT
          exit 0
        fi
        
        echo "✅ All required secrets are configured"
        echo "enabled=true" >> $GITHUB_OUTPUT
    
    - name: Test domain accessibility
      id: check-domain
      timeout-minutes: 2  # Network tests should be quick
      run: |
        echo "Testing domain accessibility for alexthola.com..."
        
        # Check if domain resolves and is reachable (with timeout)
        if timeout 30 ping -c 1 alexthola.com > /dev/null 2>&1; then
          echo "✅ Domain alexthola.com is reachable"
          echo "accessible=true" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Domain alexthola.com is not yet accessible (DNS may not be configured)"
          echo "accessible=false" >> $GITHUB_OUTPUT
        fi
        
        # Check if we can reach the health endpoint (might not exist yet on first deploy)
        if timeout 15 curl -f -s --max-time 10 "https://alexthola.com/health" > /dev/null 2>&1; then
          echo "✅ Existing deployment is healthy"
        else
          echo "ℹ️ No existing deployment detected (normal for first deployment)"
        fi

  # Deploy to DigitalOcean App Platform
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # DigitalOcean deployments can take time, but not indefinite
    needs: deployment-check
    if: needs.deployment-check.outputs.deploy-enabled == 'true'
    environment: production
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16 # v4.1.8
      with:
        name: rust-build-artifacts
        path: .
        run-id: ${{ github.event.workflow_run.id }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Checkout deployment configuration
      uses: actions/checkout@692973e3d937129bcbf40652eb9f2f61becf3332 # v4.1.7
      with:
        sparse-checkout: |
          .do/
          Dockerfile
          *.toml
          *.md
          public/
          style/
        sparse-checkout-cone-mode: false
    
    - name: Deploy to DigitalOcean
      id: deploy
      uses: digitalocean/app_action@v1 # NOTE: Cannot pin to SHA - v1 tags removed, v2 is complete rewrite. Switch to v2 after https://github.com/digitalocean/app_action/issues/123
      with:
        app_name: blog
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}
    
    - name: Wait for deployment propagation
      timeout-minutes: 2  # Simple wait shouldn't exceed this
      run: |
        echo "Waiting for deployment to propagate..."
        sleep 60  # Give DigitalOcean time to deploy and start the application
    
    - name: Post-deployment health check
      timeout-minutes: 15  # Health checks with retries
      run: |
        echo "Starting comprehensive health checks..."
        
        # Function to check multiple endpoints with retry
        comprehensive_health_check() {
          local max_attempts=12  # Reduced from 15 to control total time
          local timeout=10
          local attempt=1
          local max_wait=45  # Cap individual wait times
          local endpoints=(
            "https://alexthola.com/health"
            "https://blog-web.ondigitalocean.app/health"
          )
          
          while (( attempt <= max_attempts )); do
            echo "Health check attempt $attempt of $max_attempts"
            
            for endpoint in "${endpoints[@]}"; do
              echo "Testing endpoint: $endpoint"
              
              if timeout 15 curl -f -s --max-time $timeout "$endpoint" > /dev/null 2>&1; then
                echo "✅ Application is healthy at $endpoint"
                
                # Get and display health check response (with timeout)
                echo "Health check response:"
                timeout 10 curl -s "$endpoint" | jq '.' 2>/dev/null || timeout 10 curl -s "$endpoint"
                return 0
              else
                echo "❌ Health check failed for $endpoint"
              fi
            done
            
            if (( attempt < max_attempts )); then
              local wait_time=$((timeout + attempt * 3))  # Reduced multiplier
              wait_time=$((wait_time > max_wait ? max_wait : wait_time))  # Cap wait time
              echo "All endpoints failed, waiting ${wait_time} seconds before retry..."
              sleep $wait_time
            fi
            
            ((attempt++))
          done
          
          echo "❌ All health checks failed after $max_attempts attempts"
          echo "This might indicate a deployment issue or DNS propagation delay"
          return 1
        }
        
        comprehensive_health_check
    
    - name: Validate core functionality
      timeout-minutes: 5  # Functional tests should be quick
      run: |
        echo "Validating core application functionality..."
        
        # Test main page
        if timeout 20 curl -f -s --max-time 15 "https://alexthola.com/" > /dev/null; then
          echo "✅ Main page is accessible"
        else
          echo "❌ Main page is not accessible"
        fi
        
        # Test RSS feed
        if timeout 15 curl -f -s --max-time 10 "https://alexthola.com/rss.xml" > /dev/null; then
          echo "✅ RSS feed is accessible"
        else
          echo "⚠️ RSS feed is not accessible"
        fi
        
        # Test sitemap
        if timeout 15 curl -f -s --max-time 10 "https://alexthola.com/sitemap.xml" > /dev/null; then
          echo "✅ Sitemap is accessible"  
        else
          echo "⚠️ Sitemap is not accessible"
        fi
    
    - name: Performance and security validation
      timeout-minutes: 3  # Performance checks should be fast
      run: |
        echo "Running performance and security checks..."
        
        # Check response time (with timeout)
        echo "Testing response time..."
        RESPONSE_TIME=$(timeout 30 curl -w "%{time_total}" -s -o /dev/null "https://alexthola.com/" || echo "timeout")
        
        if [ "$RESPONSE_TIME" = "timeout" ]; then
          echo "⚠️ Response time test timed out (>30s)"
        else
          echo "Response time: ${RESPONSE_TIME}s"
          # Warn if response time is slow (using awk instead of bc for portability)
          if awk "BEGIN {exit !($RESPONSE_TIME > 3.0)}"; then
            echo "⚠️ Response time is slow (>${RESPONSE_TIME}s). Consider performance optimization."
          else
            echo "✅ Response time is acceptable (${RESPONSE_TIME}s)"
          fi
        fi
        
        # Check security headers (with timeout)
        echo "Checking security headers..."
        HEADERS=$(timeout 20 curl -I -s "https://alexthola.com/" || echo "")
        
        if echo "$HEADERS" | grep -i "strict-transport-security" > /dev/null; then
          echo "✅ HSTS header present"
        else
          echo "⚠️ HSTS header missing"
        fi
        
        if echo "$HEADERS" | grep -i "x-content-type-options" > /dev/null; then
          echo "✅ X-Content-Type-Options header present"
        else
          echo "⚠️ X-Content-Type-Options header missing"
        fi
        
        # Check SSL certificate (with timeout)
        echo "Checking SSL certificate..."
        if timeout 15 bash -c "openssl s_client -connect alexthola.com:443 -servername alexthola.com < /dev/null 2>/dev/null | openssl x509 -noout -dates"; then
          echo "✅ SSL certificate is valid"
        else
          echo "⚠️ SSL certificate issue detected or check timed out"
        fi

  # Deployment status notification
  notify:
    runs-on: ubuntu-latest
    timeout-minutes: 2  # Notification should be very quick
    needs: [deployment-check, deploy]
    if: always()
    steps:
    - name: Deployment Summary
      run: |
        echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deployment-check.outputs.deploy-enabled }}" = "true" ]; then
          echo "✅ **DigitalOcean Configuration**: Enabled" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **DigitalOcean Configuration**: Missing secrets" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Required secrets:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`DIGITALOCEAN_ACCESS_TOKEN\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`SURREAL_ADDRESS\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`SURREAL_PASSWORD\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`SURREAL_NS\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`SURREAL_DB\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`SURREAL_USERNAME\`" >> $GITHUB_STEP_SUMMARY
          exit 0
        fi
        
        if [ "${{ needs.deploy.result }}" = "success" ]; then
          echo "✅ **Deployment Status**: Successful" >> $GITHUB_STEP_SUMMARY
          echo "🌐 **Application URL**: https://alexthola.com" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy.result }}" = "failure" ]; then
          echo "❌ **Deployment Status**: Failed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.deploy.result }}" = "skipped" ]; then
          echo "⏭️ **Deployment Status**: Skipped (configuration not ready)" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Deployment Status**: Unknown" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Domain Status**: ${{ needs.deployment-check.outputs.domain-accessible == 'true' && '✅ Accessible' || '⚠️ DNS not configured' }}" >> $GITHUB_STEP_SUMMARY