name: Security - Secret Scanning

on:
  push:
    branches: [ "master" ]
    # Run on any file changes that could contain secrets
    paths-ignore:
      - 'target/**'
      - 'node_modules/**'
      - '**/*.md'  # Documentation changes generally safe, but we'll scan anyway for examples
  pull_request:
    branches: [ "master" ]
    paths-ignore:
      - 'target/**'
      - 'node_modules/**'
  schedule:
    # Run weekly scans on Sunday at 2 AM UTC for comprehensive security audits
    - cron: '0 2 * * 0'
  workflow_dispatch:  # Allow manual triggering

env:
  # Ensure consistent scanning environment
  FORCE_COLOR: 1

jobs:
  secrets-scan:
    name: Scan for secrets and sensitive information
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@08eba0b78193d1b7a89e4e5b0c3c2c6c2b8df11e # v4.3.0
      with:
        fetch-depth: 0  # Full history for comprehensive scanning
        
    - name: Install secret scanning tools
      run: |
        set -euo pipefail  # Exit on error, undefined vars, and pipe failures
        
        echo "🔧 Installing secret scanning tools..."
        
        # Install gitleaks
        echo "Installing gitleaks..."
        curl -sSfL https://github.com/gitleaks/gitleaks/releases/download/v8.28.0/gitleaks_8.28.0_linux_x64.tar.gz -o gitleaks.tar.gz
        tar -xzf gitleaks.tar.gz
        chmod +x gitleaks
        sudo mv gitleaks /usr/local/bin/
        gitleaks version
        
        # Install semgrep
        echo "Installing semgrep..."
        python3 -m pip install --upgrade pip
        python3 -m pip install semgrep
        semgrep --version
        
        # Install trufflehog
        echo "Installing trufflehog..."
        curl -sSfL https://github.com/trufflesecurity/trufflehog/releases/download/v3.90.6/trufflehog_3.90.6_linux_amd64.tar.gz -o trufflehog.tar.gz
        tar -xzf trufflehog.tar.gz
        chmod +x trufflehog
        sudo mv trufflehog /usr/local/bin/
        trufflehog --version
        
        echo "✅ All scanning tools installed successfully"
        
    - name: Run comprehensive secret scanning
      run: |
        set -euo pipefail  # Exit on error, undefined vars, and pipe failures
        
        echo "🔍 Starting comprehensive secret scanning..."
        chmod +x ./run_secret_scan.sh
        ./run_secret_scan.sh
        
    - name: Analyze scanning results
      id: analyze
      run: |
        set -euo pipefail  # Exit on error, undefined vars, and pipe failures
        
        echo "📊 Analyzing secret scanning results..."
        
        # Initialize counters
        GITLEAKS_SECRETS=0
        SEMGREP_HIGH=0
        SEMGREP_WARNINGS=0
        
        # Check gitleaks results
        if [ -f secret_scanning_results/gitleaks-report.json ]; then
          if [ -s secret_scanning_results/gitleaks-report.json ] && [ "$(cat secret_scanning_results/gitleaks-report.json)" != "[]" ]; then
            GITLEAKS_SECRETS=$(jq 'length' secret_scanning_results/gitleaks-report.json)
            echo "⚠️  Gitleaks found $GITLEAKS_SECRETS potential secrets"
          else
            echo "✅ Gitleaks: No secrets detected"
          fi
        fi
        
        # Check semgrep results
        if [ -f secret_scanning_results/semgrep-report.json ]; then
          SEMGREP_HIGH=$(jq '[.results[]? | select(.extra.severity == "ERROR")] | length' secret_scanning_results/semgrep-report.json 2>/dev/null || echo "0")
          SEMGREP_WARNINGS=$(jq '[.results[]? | select(.extra.severity == "WARNING")] | length' secret_scanning_results/semgrep-report.json 2>/dev/null || echo "0")
          
          if [ "$SEMGREP_HIGH" -gt 0 ]; then
            echo "❌ Semgrep found $SEMGREP_HIGH high-severity issues"
          fi
          if [ "$SEMGREP_WARNINGS" -gt 0 ]; then
            echo "⚠️  Semgrep found $SEMGREP_WARNINGS warnings"
          fi
          if [ "$SEMGREP_HIGH" -eq 0 ] && [ "$SEMGREP_WARNINGS" -eq 0 ]; then
            echo "✅ Semgrep: No security issues detected"
          fi
        fi
        
        # Set outputs for other steps
        echo "gitleaks_secrets=$GITLEAKS_SECRETS" >> $GITHUB_OUTPUT
        echo "semgrep_high=$SEMGREP_HIGH" >> $GITHUB_OUTPUT
        echo "semgrep_warnings=$SEMGREP_WARNINGS" >> $GITHUB_OUTPUT
        
    - name: Fail on critical secrets
      if: steps.analyze.outputs.gitleaks_secrets != '0' || steps.analyze.outputs.semgrep_high != '0'
      run: |
        set -euo pipefail  # Exit on error, undefined vars, and pipe failures
        
        echo "🚨 Critical security issues detected!"
        echo ""
        
        if [ "${{ steps.analyze.outputs.gitleaks_secrets }}" != "0" ]; then
          echo "❌ CRITICAL: Gitleaks detected ${{ steps.analyze.outputs.gitleaks_secrets }} secrets!"
          echo "Secrets found:"
          jq -r '.[] | "  - \(.RuleID): \(.File):\(.StartLine) - \(.Description)"' secret_scanning_results/gitleaks-report.json
          echo ""
        fi
        
        if [ "${{ steps.analyze.outputs.semgrep_high }}" != "0" ]; then
          echo "❌ CRITICAL: Semgrep detected ${{ steps.analyze.outputs.semgrep_high }} high-severity issues!"
          echo "Issues found:"
          jq -r '.results[] | select(.extra.severity == "ERROR") | "  - \(.check_id): \(.path):\(.start.line) - \(.extra.message)"' secret_scanning_results/semgrep-report.json
          echo ""
        fi
        
        echo "💡 Please review and fix these security issues before proceeding."
        echo "💡 Use .gitleaksignore for confirmed false positives."
        echo "💡 Update semgrep rules in .semgrep.yml if needed."
        
        exit 1
        
    - name: Generate security summary
      if: always()
      run: |
        set -euo pipefail  # Exit on error, undefined vars, and pipe failures
        
        echo "🔒 Generating security scanning summary..."
        echo ""
        
        # Display status to console and write to step summary
        if [ "${{ steps.analyze.outputs.gitleaks_secrets }}" = "0" ] && [ "${{ steps.analyze.outputs.semgrep_high }}" = "0" ]; then
          echo "✅ Security Status: PASSED"
          echo "No critical security issues detected in this repository."
          echo ""
          
          echo "## 🔒 Security Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ✅ Security Status: PASSED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "No critical security issues detected in this repository." >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ Security Status: FAILED"
          echo "Critical security issues detected that require immediate attention."
          echo ""
          
          echo "## 🔒 Security Scanning Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ❌ Security Status: FAILED" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Critical security issues detected that require immediate attention." >> $GITHUB_STEP_SUMMARY
        fi
        
        # Display scan results to console
        echo "📊 Scan Results Summary:"
        echo "┌─────────────┬─────────────────┬──────────┐"
        echo "│ Tool        │ Critical Issues │ Warnings │"
        echo "├─────────────┼─────────────────┼──────────┤"
        echo "│ Gitleaks    │ ${{ steps.analyze.outputs.gitleaks_secrets }} secrets         │ -        │"
        echo "│ Semgrep     │ ${{ steps.analyze.outputs.semgrep_high }} errors          │ ${{ steps.analyze.outputs.semgrep_warnings }} warnings │"
        echo "│ Trufflehog  │ See artifacts   │ -        │"
        echo "└─────────────┴─────────────────┴──────────┘"
        echo ""
        
        # Write same table to step summary
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Scan Results Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Tool | Critical Issues | Warnings |" >> $GITHUB_STEP_SUMMARY
        echo "|------|----------------|----------|" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Gitleaks | ${{ steps.analyze.outputs.gitleaks_secrets }} secrets | - |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Semgrep | ${{ steps.analyze.outputs.semgrep_high }} errors | ${{ steps.analyze.outputs.semgrep_warnings }} warnings |" >> $GITHUB_STEP_SUMMARY
        echo "| 🔍 Trufflehog | See artifacts | - |" >> $GITHUB_STEP_SUMMARY
        
        # Display coverage info to console
        echo "📊 Scanning Coverage:"
        echo "- Gitleaks: Pattern-based secret detection"
        echo "- Semgrep: Custom security rules (.semgrep.yml)"
        echo "- Trufflehog: Entropy-based secret detection"
        echo ""
        echo "📁 Full scan reports available in workflow artifacts."
        
        # Write coverage info to step summary
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 Scanning Coverage" >> $GITHUB_STEP_SUMMARY
        echo "- **Gitleaks**: Pattern-based secret detection" >> $GITHUB_STEP_SUMMARY
        echo "- **Semgrep**: Custom security rules (.semgrep.yml)" >> $GITHUB_STEP_SUMMARY  
        echo "- **Trufflehog**: Entropy-based secret detection" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Full scan reports available in workflow artifacts." >> $GITHUB_STEP_SUMMARY
        
    - name: Upload secret scanning results
      uses: actions/upload-artifact@ea165f8e3437f3bbf9a4e69b46f5b56a8b4ec86c # v4.6.2
      if: always()
      with:
        name: secret-scanning-results-${{ github.run_number }}
        path: secret_scanning_results/
        retention-days: 90  # Keep security reports longer for compliance
        
    - name: Set workflow conclusion
      if: always()
      run: |
        set -euo pipefail  # Exit on error, undefined vars, and pipe failures
        
        if [ "${{ steps.analyze.outputs.gitleaks_secrets }}" != "0" ] || [ "${{ steps.analyze.outputs.semgrep_high }}" != "0" ]; then
          echo "❌ Secret scanning failed - critical issues detected"
          echo "This prevents the workflow from proceeding to protect repository security."
        else
          echo "✅ Secret scanning passed - repository is secure"
          echo "Other workflows can proceed safely."
        fi