[workspace]
resolver = "2"
members = ["app", "frontend", "markdown", "server"]

[workspace.package]
version = "0.1.0"
authors = ["Alex Thola <alexthola@gmail.com>"]
license = "0BSD"
description = "A public webblog"
homepage = "https://github.com/athola/blog"
repository = "https://github.com/athola/blog"
readme = "https://github.com/athola/blog/README.md"
documentation = "https://github.com/athola/blog/docs"
keywords = ["axum", "blog", "leptos", "web", "website"]
categories = ["website"]
edition = "2021"

[workspace.dependencies]
axum = { version = "0.7.9", features = ["macros"] }
cfg-if = "1"
chrono = "0.4.41"
leptos = { version = "0.7.8", features = ["rustls", "nightly"], default-features = false }
leptos_axum = "0.7"
serde = { version = "1.0.219", features = ["derive"] }
surrealdb = { version = "2.3.7", features = ["protocol-http", "kv-mem"] }
tracing = "0.1"
tokio-retry = "0.3"
backoff = { version = "0.4", features = ["tokio"] }
reqwest = { version = "0.12", default-features = false, features = ["json", "rustls-tls"] }

# Test reporting dependencies
cargo-nextest = "0.9"
cargo-llvm-cov = "0.6"

# Integration test dependencies
uuid = { version = "1.18", features = ["v4"] }

# Defines a size-optimized profile for the WASM bundle in release mode
[profile.wasm-release]
inherits = "release"
opt-level = 'z'
lto = true
codegen-units = 1

[profile.server]
inherits = "release"
opt-level = 2
lto = "thin"

# The name used by wasm-bindgen/cargo-leptos for the JS wrapper file. It should
# be the same as the `name` field in the manifest of the `frontend` package. This
# will probably be the same as the `name` field in the root manifest.
[[workspace.metadata.leptos]]
# This name is used for the WASM, JS, and CSS file names.
name = "blog"

# The package in the workspace which contains the server binary (binary crate)
bin-package = "server"

# The package in the workspace that contains the frontend wasm binary (library crate)
lib-package = "frontend"

# The name used by wasm-bindgen/cargo-leptos for the JS wrapper file. It should
# be the same as the `name` field in the manifest of the `frontend` package. This
# will probably be the same as the `name` field in the root manifest.
output-name = "blog"

# The site root folder is where cargo-leptos generate all output. WARNING: all content of this folder will be erased on a rebuild. Use it in your server setup.
site-root = "target/site"

# The site-root relative folder where all compiled output (JS, WASM and CSS) is written
# Defaults to pkg
site-pkg-dir = "pkg"

# [Optional] The source CSS file. If it ends with .sass or .scss then it will be compiled by dart-sass into CSS.
# The CSS is optimized by Lightning CSS before being written to <site-root>/<site-pkg>/app.css.
tailwind-input-file = "style/tailwind.css"

# [Optional] Files in the asset-dir will be copied to the site-root directory
assets-dir = "public"

# The IP and port (ex: 127.0.0.1:3000) where the server serves the content. Use it in your server setup.
site-addr = "127.0.0.1:3007"

# The port to use for automatic reload monitoring
reload-port = 3001

# [Optional] Command to use when running end2end tests. It will run in the end2end dir.
#   [Windows] for non-WSL use "npx.cmd playwright test"
#   This binary name can be checked in Powershell with Get-Command npx
end2end-cmd = "npx playwright test"
end2end-dir = "end2end"

#  The browserlist query used for optimizing the CSS.
browserquery = "defaults"

# Set by cargo-leptos watch when building with that tool. Controls whether autoreload JS will be included in the head
watch = false

# The environment Leptos will run in, usually either "DEV" or "PROD"
env = "DEV"

# The features to use when compiling the bin target
#
# Optional. Can be over-ridden with the command line parameter --bin-features
bin-features = []

# If the --no-default-features flag should be used when compiling the bin target
#
# Optional. Defaults to false.
bin-default-features = false

# The features to use when compiling the lib target
#
# Optional. Can be over-ridden with the command line parameter --lib-features
lib-features = []

# If the --no-default-features flag should be used when compiling the lib target
#
# Optional. Defaults to false.
lib-default-features = false

# The profile to use for the lib target when compiling for release
#
# Optional. Defaults to "release".
lib-profile-release = "wasm-release"

[package]
name = "blog-workspace"
version.workspace = true
authors.workspace = true
license.workspace = true
description.workspace = true
homepage.workspace = true
repository.workspace = true
documentation.workspace = true
keywords.workspace = true
categories.workspace = true
edition.workspace = true

[lints.rust]
unexpected_cfgs = { level = "warn", check-cfg = ['cfg(coverage)', 'cfg(feature, values("ci"))'] }

[features]
ci = []


# SurrealDB migration test suite
[[test]]
name = "migration_core_tests"
path = "tests/migration_core_tests.rs"

[[test]]
name = "schema_evolution_tests"
path = "tests/schema_evolution_tests.rs"

[dev-dependencies]
serde = { version = "1.0.219", features = ["derive"] }
uuid = { version = "1.18", features = ["v4"] }
surrealdb = { version = "2.3.7", features = ["protocol-http", "kv-mem"] }
tokio = { version = "1", features = ["full"] }
reqwest.workspace = true
lazy_static = "1.5"
once_cell = "1.19"

